diff -ru urlview-0.9/sample.urlview urlview-html/sample.urlview
--- urlview-0.9/sample.urlview	2000-07-04 06:14:30.000000000 -0400
+++ urlview-html/sample.urlview	2010-07-11 21:49:17.878430780 -0400
@@ -26,3 +26,14 @@
 #COMMAND netscape -remote 'openURL(%s)'
 COMMAND url_handler.sh
 
+# Switch for generating HTML output
+#HTMLOUT
+
+# Template string for HTML body (outer layer) (%s contains generated inner layer of HTML_LINKs)
+#HTML_TEMPLATE  <ol>\n%s</ol>\n
+#HTML_TEMPLATE  %s\n
+#HTML_TEMPLATE  <html><head><title>urlview generated links</title></head><body>%s</body></html>
+
+# Template string for HTML link entry (inner layer) per URL (both %s contain the URL)
+#HTML_LINK      <li><a href="%s">%s</a>\n
+#HTML_LINK      <a href="%s">%s</a><br>\n
diff -ru urlview-0.9/urlview.c urlview-html/urlview.c
--- urlview-0.9/urlview.c	2000-07-04 06:14:30.000000000 -0400
+++ urlview-html/urlview.c	2010-07-11 21:50:49.835492600 -0400
@@ -49,6 +49,8 @@
 #define DEFAULT_REGEXP "(((https?|ftp|gopher)://|(mailto|file|news):)[^' \t<>\"]+|(www|web|w3)\\.[-a-z0-9.]+)[^' \t.,;<>\"\\):]"
 #define DEFAULT_COMMAND "url_handler.sh %s"
 #define SYSTEM_INITFILE "/etc/urlview.conf"
+#define DEFAULT_HTML_TEMPLATE "<ol>\n%s</ol>\n"			/* or "%s" */
+#define DEFAULT_HTML_LINK "<li><a href=\"%s\">%s</a>\n"		/* or "<a href=\"%s\">%s</a><br>\n" */
 
 #define OFFSET 2
 #define PAGELEN (LINES - 1 - OFFSET)
@@ -141,6 +143,62 @@
     regfree (&rx);
   }
 }
+
+void html_out (int urlcount, char **url, char *html_template, char *html_link)
+{
+  char *links = 0;
+  size_t n = 0;
+  size_t len = 0;
+  int i;
+
+  links = (char *) malloc (1);
+  for (i = 0; i < urlcount; i++)
+  {
+    n = 2 * strlen (url[i]) + strlen (html_link);
+    links = (char *) realloc (links, len + n + 1);
+    n = snprintf (links + len, n+1, html_link, url[i], url[i]);
+    len += n;
+  }
+
+  printf (html_template, links);
+}
+
+void escape_string (char *wc, char *pc)
+{
+  while (ISSPACE (*pc))
+    pc++;
+
+  while (*pc && *pc != '\n')
+  {
+    if (*pc == '\\')
+    {
+      pc++;
+      switch (*pc)
+      {
+	case 'n':
+	  *wc++ = '\n';
+	  break;
+	case 'r':
+	  *wc++ = '\r';
+	  break;
+	case 't':
+	  *wc++ = '\t';
+	  break;
+	case 'f':
+	  *wc++ = '\f';
+	  break;
+	default:
+	  *wc++ = '\\';
+	  *wc++ = *pc;
+	  break;
+      }
+    }
+    else
+      *wc++ = *pc;
+    pc++;
+  }
+  *wc = 0;
+}
  
 int main (int argc, char **argv)
 {
@@ -157,6 +215,8 @@
   char regexp[1024];
   char search[1024];
   char scratch[1024];
+  char html_template[1024];
+  char html_link[1024];
   char **url;
   int urlsize = URLSIZE;
   char *pc;
@@ -176,12 +236,15 @@
   int is_filter = 0;
 
   int expert = 0;
+  int html = 0;
   
   if (!argv[optind])
     is_filter = 1;
 
   strncpy (regexp, DEFAULT_REGEXP, sizeof (regexp) - 1);
   strncpy (command, DEFAULT_COMMAND, sizeof (command) - 1);
+  strncpy (html_template, DEFAULT_HTML_TEMPLATE, sizeof (html_template) - 1);
+  strncpy (html_link, DEFAULT_HTML_LINK, sizeof (html_link) - 1);
 
   /*** read the initialization file ***/
 
@@ -200,40 +263,7 @@
 	continue;
       if (strncmp ("REGEXP", buf, 6) == 0 && isspace (buf[6]))
       {
-	pc = buf + 6;
-	while (isspace (*pc))
-	  pc++;
-	wc = regexp;
-	while (*pc && *pc != '\n')
-	{
-	  if (*pc == '\\')
-	  {
-	    pc++;
-	    switch (*pc)
-	    {
-	      case 'n':
-		*wc++ = '\n';
-		break;
-	      case 'r':
-		*wc++ = '\r';
-		break;
-	      case 't':
-		*wc++ = '\t';
-		break;
-	      case 'f':
-		*wc++ = '\f';
-		break;
-	      default:
-		*wc++ = '\\';
-		*wc++ = *pc;
-		break;
-	    }
-	  }
-	  else
-	    *wc++ = *pc;
-	  pc++;
-	}
-	*wc = 0;
+	escape_string (regexp, buf + 6);
       }
       else if (strncmp ("COMMAND", buf, 7) == 0 && isspace (buf[7]))
       {
@@ -244,10 +274,22 @@
 	strncpy (command, pc, sizeof (command) - 1);
 	command[sizeof (command) - 1] = 0;
       }
+      else if (strncmp ("HTML_TEMPLATE", buf, 13) == 0 && ISSPACE (buf[13]))
+      {
+	escape_string (html_template, buf + 13);
+      }
+      else if (strncmp ("HTML_LINK", buf, 9) == 0 && ISSPACE (buf[9]))
+      {
+	escape_string (html_link, buf + 9);
+      }
       else if (strcmp ("EXPERT\n", buf) == 0)
       {
 	expert = 1;
       }
+      else if (strcmp("HTMLOUT\n", buf) == 0)
+      {
+	html = 1;
+      }
       else
       {
 	printf ("Unknown command: %s", buf);
@@ -353,6 +395,11 @@
     exit (1);
   }
   
+  if (html)
+  {
+    html_out (urlcount, url, html_template, html_link);
+    exit (0);
+  }
   /*** present the URLs to the user ***/
 
 #ifdef USE_SLANG
diff -ru urlview-0.9/urlview.conf.suse urlview-html/urlview.conf.suse
--- urlview-0.9/urlview.conf.suse	2000-07-04 05:05:10.000000000 -0400
+++ urlview-html/urlview.conf.suse	2010-07-11 21:49:38.345095344 -0400
@@ -6,4 +6,6 @@
 #
 # REGEXP  (((https?|ftp|gopher)://|(mailto|file|news):)[^' \t<>"]+|(www|web|w3)\.[-a-z0-9.]+)[^' \t.,;<>"\):]
 # COMMAND url_handler.sh '%s'
+# HTML_TEMPLATE <ol>\n%s</ol>\n
+# HTML_LINK <li><a href="%s">%s</a>\n
 #
diff -ru urlview-0.9/urlview.man urlview-html/urlview.man
--- urlview-0.9/urlview.man	2000-07-04 06:14:30.000000000 -0400
+++ urlview-html/urlview.man	2010-07-11 21:51:23.428834416 -0400
@@ -74,6 +74,20 @@
 showing up inside the URL are handled properly.  (Note that this
 shouldn't happen with the default regular expression, which
 explicitly excludes single quotes.)
+.TP
+HTMLOUT
+This switch will force \fBurlview\fP to generate HTML output (on stdout).
+.TP
+HTML_TEMPLATE \fItemplate\fP
+When HTMLOUT is set, this specifies the template string for the HTML body (outer layer).
+To be useful, \fItemplate\fP must contain \fB%s\fP, which represents the set of
+HTML links (inner layer) as specified below.
+.TP
+HTML_LINK \fIlink\fP
+When HTMLOUT is set, this specifies the template string for HTML links (inner layer).
+To be useful, \fIlink\fP must contain at least one \fB%s\fP, which represents the URL;
+a second \fB%s\fP may also be used (and it also contains the URL).  The \fIlink\fP
+will almost certainly use both \fB%s\fP instances.
 .SH FILES
 .PP
 .IP "/etc/urlview.conf"
diff -ru urlview-0.9/enter.c urlview-fixes/enter.c
--- urlview-0.9/enter.c	2000-07-04 06:14:30.000000000 -0400
+++ urlview-fixes/enter.c	2010-07-11 22:11:31.725237170 -0400
@@ -26,6 +26,8 @@
 #include <string.h>
 #include <errno.h>
 #include <ctype.h>
+/* Ripped from my system, but seems pretty standard. */
+#define _POSIX_PATH_MAX 256
 
 #ifndef URLVIEW
 
diff -ru urlview-0.9/urlview.c urlview-fixes/urlview.c
--- urlview-0.9/urlview.c	2010-07-11 22:06:15.868328569 -0400
+++ urlview-fixes/urlview.c	2010-07-11 22:12:08.488461722 -0400
@@ -168,7 +168,7 @@
 
 void escape_string (char *wc, char *pc)
 {
-  while (ISSPACE (*pc))
+  while (isspace (*pc))
     pc++;
 
   while (*pc && *pc != '\n')
@@ -277,11 +277,11 @@
 	strncpy (command, pc, sizeof (command) - 1);
 	command[sizeof (command) - 1] = 0;
       }
-      else if (strncmp ("HTML_TEMPLATE", buf, 13) == 0 && ISSPACE (buf[13]))
+      else if (strncmp ("HTML_TEMPLATE", buf, 13) == 0 && isspace (buf[13]))
       {
 	escape_string (html_template, buf + 13);
       }
-      else if (strncmp ("HTML_LINK", buf, 9) == 0 && ISSPACE (buf[9]))
+      else if (strncmp ("HTML_LINK", buf, 9) == 0 && isspace (buf[9]))
       {
 	escape_string (html_link, buf + 9);
       }
Binary files urlview-0.9/urlview.o and urlview-fixes/urlview.o differ
#
# This patch enables urlview v0.9 to decode quoted-printables in selected URL.
#
--- urlview-0.9/urlview.c	Tue Jul  4 12:14:30 2000
+++ urlview-0.9.qpd-patch/urlview.c	Thu Aug  3 02:49:03 2000
@@ -18,6 +18,8 @@
  *
  * Created:       Thu Dec  4 02:13:11 PST 1997
  * Last Modified: Tue Jul  4 11:23:49 CEST 2000
+ * Last Modified: Thu Aug  3 02:46:37 CEST 2000 
+ *	Eike Rathke, added 'd': decode quoted-printable
  */ 
 
 #ifdef USE_SLANG
@@ -58,7 +60,8 @@
 {
   FULL = 1,
   INDEX,
-  MOTION
+  MOTION,
+  CURRENT
 };
 
 extern int mutt_enter_string (unsigned char *buf, size_t buflen, int y, int x,
@@ -397,6 +400,14 @@
       }
       clrtobot ();
     }
+    else if (redraw == CURRENT)
+    {
+      mvaddstr (current - top + OFFSET, 0, "   ");
+      snprintf (buf, sizeof (buf), "%4d ", current + 1);
+      addstr (buf);
+      addstr (url[current]);
+      clrtoeol ();
+    }
     else if (redraw == MOTION)
       mvaddstr (oldcurrent - top + OFFSET, 0, "  ");
 
@@ -570,6 +581,42 @@
 	break;
       case 'N':
 	search_backward (search, urlcount, url, &redraw, &current, &top);
+	break;
+      case 'd':
+	{ /* erAck: decode quoted-printable */
+	  char *p1, *p2;
+	  p1 = p2 = url[current];
+	  do 
+	  {
+	    while ( *p2 && *p2 != '=' )
+	      *p1++ = *p2++;
+	    if ( *p2 == '=' )
+	    {
+	      if ( isxdigit( *(p2+1) ) && isxdigit( *(p2+2) ) )
+	      {
+		++p2;
+		if ( 'A' <= *p2 && *p2 <= 'F' )
+		  *p1 = (((*p2 - 'A') + 10) << 4);
+		else if ( 'a' <= *p2 && *p2 <= 'f' )
+		  *p1 = (((*p2 - 'a') + 10) << 4);
+		else
+		  *p1 = ((*p2 - '0') << 4);
+		++p2;
+		if ( 'A' <= *p2 && *p2 <= 'F' )
+		  *p1 += (*p2 - 'A') + 10;
+		else if ( 'a' <= *p2 && *p2 <= 'f' )
+		  *p1 += (*p2 - 'a') + 10;
+		else
+		  *p1 += (*p2 - '0');
+		p1++, p2++;
+	      }
+	      else
+		*p1++ = *p2++;
+	    }
+	  } while ( *p2 );
+	  *p1 = 0;
+	}
+	redraw = CURRENT;
 	break;
       default:
 	break;
